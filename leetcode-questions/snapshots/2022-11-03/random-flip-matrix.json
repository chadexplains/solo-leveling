{
  "id": "random-flip-matrix",
  "name": "Random Flip Matrix",
  "tags": [
    "Hash Table",
    "Math",
    "Reservoir Sampling",
    "Randomized"
  ],
  "description": "There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.\n\nOptimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.\n\nImplement the Solution class:\n\n\n\tSolution(int m, int n) Initializes the object with the size of the binary matrix m and n.\n\tint[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.\n\tvoid reset() Resets all the values of the matrix to be 0.\n\n\n \nExample 1:\n\nInput\n[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\n[[3, 1], [], [], [], [], []]\nOutput\n[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]\n\nExplanation\nSolution solution = new Solution(3, 1);\nsolution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\nsolution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\nsolution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\nsolution.reset(); // All the values are reset to 0 and can be returned.\nsolution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\n\n\n \nConstraints:\n\n\n\t1 <= m, n <= 104\n\tThere will be at least one free cell for each call to flip.\n\tAt most 1000 calls will be made to flip and reset.\n\n"
}