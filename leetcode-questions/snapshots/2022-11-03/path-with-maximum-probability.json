{
  "id": "path-with-maximum-probability",
  "name": "Path with Maximum Probability",
  "tags": [
    "Graph",
    "Heap (Priority Queue)",
    "Shortest Path"
  ],
  "description": "You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].\n\nGiven two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.\n\nIf there is no path from start to end, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.\n\n \nExample 1:\n\n\n\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\nOutput: 0.25000\nExplanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.\n\n\nExample 2:\n\n\n\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\nOutput: 0.30000\n\n\nExample 3:\n\n\n\nInput: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\nOutput: 0.00000\nExplanation: There is no path between 0 and 2.\n\n\n \nConstraints:\n\n\n\t2 <= n <= 10^4\n\t0 <= start, end < n\n\tstart != end\n\t0 <= a, b < n\n\ta != b\n\t0 <= succProb.length == edges.length <= 2*10^4\n\t0 <= succProb[i] <= 1\n\tThere is at most one edge between every two nodes.\n\n"
}