{
  "id": "minimum-cost-homecoming-of-a-robot-in-a-grid",
  "name": "Minimum Cost Homecoming of a Robot in a Grid",
  "tags": [
    "Array",
    "Greedy",
    "Matrix"
  ],
  "description": "There is an m x n grid, where (0, 0) is the top-left cell and (m - 1, n - 1) is the bottom-right cell. You are given an integer array startPos where startPos = [startrow, startcol] indicates that initially, a robot is at the cell (startrow, startcol). You are also given an integer array homePos where homePos = [homerow, homecol] indicates that its home is at the cell (homerow, homecol).\n\nThe robot needs to go to its home. It can move one cell in four directions: left, right, up, or down, and it can not move outside the boundary. Every move incurs some cost. You are further given two 0-indexed integer arrays: rowCosts of length m and colCosts of length n.\n\n\n\tIf the robot moves up or down into a cell whose row is r, then this move costs rowCosts[r].\n\tIf the robot moves left or right into a cell whose column is c, then this move costs colCosts[c].\n\n\nReturn the minimum total cost for this robot to return home.\n\n \nExample 1:\n\nInput: startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]\nOutput: 18\nExplanation: One optimal path is that:\nStarting from (1, 0)\n-> It goes down to (2, 0). This move costs rowCosts[2] = 3.\n-> It goes right to (2, 1). This move costs colCosts[1] = 2.\n-> It goes right to (2, 2). This move costs colCosts[2] = 6.\n-> It goes right to (2, 3). This move costs colCosts[3] = 7.\nThe total cost is 3 + 2 + 6 + 7 = 18\n\nExample 2:\n\nInput: startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]\nOutput: 0\nExplanation: The robot is already at its home. Since no moves occur, the total cost is 0.\n\n\n \nConstraints:\n\n\n\tm == rowCosts.length\n\tn == colCosts.length\n\t1 <= m, n <= 105\n\t0 <= rowCosts[r], colCosts[c] <= 104\n\tstartPos.length == 2\n\thomePos.length == 2\n\t0 <= startrow, homerow < m\n\t0 <= startcol, homecol < n\n\n"
}