{
  "id": "check-if-an-original-string-exists-given-two-encoded-strings",
  "name": "Check if an Original String Exists Given Two Encoded Strings",
  "tags": [
    "String",
    "Dynamic Programming"
  ],
  "description": "An original string, consisting of lowercase English letters, can be encoded by the following steps:\n\n\n\tArbitrarily split it into a sequence of some number of non-empty substrings.\n\tArbitrarily choose some elements (possibly none) of the sequence, and replace each with its length (as a numeric string).\n\tConcatenate the sequence as the encoded string.\n\n\nFor example, one way to encode an original string \"abcdefghijklmnop\" might be:\n\n\n\tSplit it as a sequence: [\"ab\", \"cdefghijklmn\", \"o\", \"p\"].\n\tChoose the second and third elements to be replaced by their lengths, respectively. The sequence becomes [\"ab\", \"12\", \"1\", \"p\"].\n\tConcatenate the elements of the sequence to get the encoded string: \"ab121p\".\n\n\nGiven two encoded strings s1 and s2, consisting of lowercase English letters and digits 1-9 (inclusive), return true if there exists an original string that could be encoded as both s1 and s2. Otherwise, return false.\n\nNote: The test cases are generated such that the number of consecutive digits in s1 and s2 does not exceed 3.\n\n \nExample 1:\n\nInput: s1 = \"internationalization\", s2 = \"i18n\"\nOutput: true\nExplanation: It is possible that \"internationalization\" was the original string.\n- \"internationalization\" \n  -> Split:       [\"internationalization\"]\n  -> Do not replace any element\n  -> Concatenate:  \"internationalization\", which is s1.\n- \"internationalization\"\n  -> Split:       [\"i\", \"nternationalizatio\", \"n\"]\n  -> Replace:     [\"i\", \"18\",                 \"n\"]\n  -> Concatenate:  \"i18n\", which is s2\n\n\nExample 2:\n\nInput: s1 = \"l123e\", s2 = \"44\"\nOutput: true\nExplanation: It is possible that \"leetcode\" was the original string.\n- \"leetcode\" \n  -> Split:      [\"l\", \"e\", \"et\", \"cod\", \"e\"]\n  -> Replace:    [\"l\", \"1\", \"2\",  \"3\",   \"e\"]\n  -> Concatenate: \"l123e\", which is s1.\n- \"leetcode\" \n  -> Split:      [\"leet\", \"code\"]\n  -> Replace:    [\"4\",    \"4\"]\n  -> Concatenate: \"44\", which is s2.\n\n\nExample 3:\n\nInput: s1 = \"a5b\", s2 = \"c5b\"\nOutput: false\nExplanation: It is impossible.\n- The original string encoded as s1 must start with the letter 'a'.\n- The original string encoded as s2 must start with the letter 'c'.\n\n\n \nConstraints:\n\n\n\t1 <= s1.length, s2.length <= 40\n\ts1 and s2 consist of digits 1-9 (inclusive), and lowercase English letters only.\n\tThe number of consecutive digits in s1 and s2 does not exceed 3.\n\n"
}