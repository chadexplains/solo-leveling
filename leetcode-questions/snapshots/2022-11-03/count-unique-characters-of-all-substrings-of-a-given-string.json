{
  "id": "count-unique-characters-of-all-substrings-of-a-given-string",
  "name": "Count Unique Characters of All Substrings of a Given String",
  "tags": [
    "Hash Table",
    "String",
    "Dynamic Programming"
  ],
  "description": "Let's define a function countUniqueChars(s) that returns the number of unique characters on s.\n\n\n\tFor example, calling countUniqueChars(s) if s = \"LEETCODE\" then \"L\", \"T\", \"C\", \"O\", \"D\" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.\n\n\nGiven a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer.\n\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.\n\n \nExample 1:\n\nInput: s = \"ABC\"\nOutput: 10\nExplanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\nEvery substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n\n\nExample 2:\n\nInput: s = \"ABA\"\nOutput: 8\nExplanation: The same as example 1, except countUniqueChars(\"ABA\") = 1.\n\n\nExample 3:\n\nInput: s = \"LEETCODE\"\nOutput: 92\n\n\n \nConstraints:\n\n\n\t1 <= s.length <= 105\n\ts consists of uppercase English letters only.\n\n"
}