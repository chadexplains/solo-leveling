{
  "id": "basic-calculator-iv",
  "name": "Basic Calculator IV",
  "tags": [
    "Hash Table",
    "Math",
    "String",
    "Stack",
    "Recursion"
  ],
  "description": "Given an expression such as expression = \"e + 8 - a + 5\" and an evaluation map such as {\"e\": 1} (given in terms of evalvars = [\"e\"] and evalints = [1]), return a list of tokens representing the simplified expression, such as [\"-1*a\",\"14\"]\n\n\n\tAn expression alternates chunks and symbols, with a space separating each chunk and symbol.\n\tA chunk is either an expression in parentheses, a variable, or a non-negative integer.\n\tA variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like \"2x\" or \"-x\".\n\n\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.\n\n\n\tFor example, expression = \"1 + 2 * 3\" has an answer of [\"7\"].\n\n\nThe format of the output is as follows:\n\n\n\tFor each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.\n\t\n\t\tFor example, we would never write a term like \"b*a*c\", only \"a*b*c\".\n\t\n\t\n\tTerms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n\t\n\t\tFor example, \"a*a*b*c\" has degree 4.\n\t\n\t\n\tThe leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.\n\tAn example of a well-formatted answer is [\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"].\n\tTerms (including constant terms) with coefficient 0 are not included.\n\t\n\t\tFor example, an expression of \"0\" has an output of [].\n\t\n\t\n\n\nNote: You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\n\n \nExample 1:\n\nInput: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\nOutput: [\"-1*a\",\"14\"]\n\n\nExample 2:\n\nInput: expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]\nOutput: [\"-1*pressure\",\"5\"]\n\n\nExample 3:\n\nInput: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\nOutput: [\"1*e*e\",\"-64\"]\n\n\n \nConstraints:\n\n\n\t1 <= expression.length <= 250\n\texpression consists of lowercase English letters, digits, '+', '-', '*', '(', ')', ' '.\n\texpression does not contain any leading or trailing spaces.\n\tAll the tokens in expression are separated by a single space.\n\t0 <= evalvars.length <= 100\n\t1 <= evalvars[i].length <= 20\n\tevalvars[i] consists of lowercase English letters.\n\tevalints.length == evalvars.length\n\t-100 <= evalints[i] <= 100\n\n"
}