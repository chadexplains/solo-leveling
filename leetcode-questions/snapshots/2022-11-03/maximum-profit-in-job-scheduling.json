{
  "id": "maximum-profit-in-job-scheduling",
  "name": "Maximum Profit in Job Scheduling",
  "tags": [
    "Array",
    "Binary Search",
    "Dynamic Programming",
    "Sorting"
  ],
  "description": "We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].\n\nYou're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\n\nIf you choose a job that ends at time X you will be able to start another job that starts at time X.\n\n \nExample 1:\n\n\n\nInput: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.\n\n\nExample 2:\n\n \n\nInput: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\nOutput: 150\nExplanation: The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.\n\n\nExample 3:\n\n\n\nInput: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\nOutput: 6\n\n\n \nConstraints:\n\n\n\t1 <= startTime.length == endTime.length == profit.length <= 5 * 104\n\t1 <= startTime[i] < endTime[i] <= 109\n\t1 <= profit[i] <= 104\n\n"
}