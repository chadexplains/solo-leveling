{
  "id": "maximum-sum-bst-in-binary-tree",
  "name": "Maximum Sum BST in Binary Tree",
  "tags": [
    "Dynamic Programming",
    "Tree",
    "Depth-First Search",
    "Binary Search Tree",
    "Binary Tree"
  ],
  "description": "Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).\n\nAssume a BST is defined as follows:\n\n\n\tThe left subtree of a node contains only nodes with keys less than the node's key.\n\tThe right subtree of a node contains only nodes with keys greater than the node's key.\n\tBoth the left and right subtrees must also be binary search trees.\n\n\n \nExample 1:\n\n\n\nInput: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]\nOutput: 20\nExplanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.\n\n\nExample 2:\n\n\n\nInput: root = [4,3,null,1,2]\nOutput: 2\nExplanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.\n\n\nExample 3:\n\nInput: root = [-4,-2,-5]\nOutput: 0\nExplanation: All values are negatives. Return an empty BST.\n\n\n \nConstraints:\n\n\n\tThe number of nodes in the tree is in the range [1, 4 * 104].\n\t-4 * 104 <= Node.val <= 4 * 104\n\n"
}