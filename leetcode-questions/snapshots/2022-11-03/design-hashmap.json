{
  "id": "design-hashmap",
  "name": "Design HashMap",
  "tags": [
    "Array",
    "Hash Table",
    "Linked List",
    "Design",
    "Hash Function"
  ],
  "description": "Design a HashMap without using any built-in hash table libraries.\n\nImplement the MyHashMap class:\n\n\n\tMyHashMap() initializes the object with an empty map.\n\tvoid put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.\n\tint get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.\n\tvoid remove(key) removes the key and its corresponding value if the map contains the mapping for the key.\n\n\n \nExample 1:\n\nInput\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\nOutput\n[null, null, null, 1, -1, null, 1, null, -1]\n\nExplanation\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\n\n\n \nConstraints:\n\n\n\t0 <= key, value <= 106\n\tAt most 104 calls will be made to put, get, and remove.\n\n"
}