{
  "id": "longest-mountain-in-array",
  "name": "Longest Mountain in Array",
  "tags": [
    "Array",
    "Two Pointers",
    "Dynamic Programming",
    "Enumeration"
  ],
  "description": "You may recall that an array arr is a mountain array if and only if:\n\n\n\tarr.length >= 3\n\tThere exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\n\t\n\t\tarr[0] < arr[1] < ... < arr[i - 1] < arr[i]\n\t\tarr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\t\n\t\n\n\nGiven an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.\n\n \nExample 1:\n\nInput: arr = [2,1,4,7,3,2,5]\nOutput: 5\nExplanation: The largest mountain is [1,4,7,3,2] which has length 5.\n\n\nExample 2:\n\nInput: arr = [2,2,2]\nOutput: 0\nExplanation: There is no mountain.\n\n\n \nConstraints:\n\n\n\t1 <= arr.length <= 104\n\t0 <= arr[i] <= 104\n\n\n \nFollow up:\n\n\n\tCan you solve it using only one pass?\n\tCan you solve it in O(1) space?\n\n"
}