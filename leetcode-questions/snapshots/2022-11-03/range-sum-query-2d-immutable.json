{
  "id": "range-sum-query-2d-immutable",
  "name": "Range Sum Query 2D - Immutable",
  "tags": [
    "Array",
    "Design",
    "Matrix",
    "Prefix Sum"
  ],
  "description": "Given a 2D matrix matrix, handle multiple queries of the following type:\n\n\n\tCalculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n\n\nImplement the NumMatrix class:\n\n\n\tNumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.\n\tint sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\n\n\nYou must design an algorithm where sumRegion works on O(1) time complexity.\n\n \nExample 1:\n\nInput\n[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\nOutput\n[null, 8, 11, 12]\n\nExplanation\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n\n\n \nConstraints:\n\n\n\tm == matrix.length\n\tn == matrix[i].length\n\t1 <= m, n <= 200\n\t-104 <= matrix[i][j] <= 104\n\t0 <= row1 <= row2 < m\n\t0 <= col1 <= col2 < n\n\tAt most 104 calls will be made to sumRegion.\n\n"
}