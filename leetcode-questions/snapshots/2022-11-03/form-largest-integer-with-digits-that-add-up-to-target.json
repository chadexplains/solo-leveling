{
  "id": "form-largest-integer-with-digits-that-add-up-to-target",
  "name": "Form Largest Integer With Digits That Add up to Target",
  "tags": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "Given an array of integers cost and an integer target, return the maximum integer you can paint under the following rules:\n\n\n\tThe cost of painting a digit (i + 1) is given by cost[i] (0-indexed).\n\tThe total cost used must be equal to target.\n\tThe integer does not have 0 digits.\n\n\nSince the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return \"0\".\n\n \nExample 1:\n\nInput: cost = [4,3,2,5,6,7,2,5,5], target = 9\nOutput: \"7772\"\nExplanation: The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\nDigit    cost\n  1  ->   4\n  2  ->   3\n  3  ->   2\n  4  ->   5\n  5  ->   6\n  6  ->   7\n  7  ->   2\n  8  ->   5\n  9  ->   5\n\n\nExample 2:\n\nInput: cost = [7,6,5,5,5,6,8,7,8], target = 12\nOutput: \"85\"\nExplanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12.\n\n\nExample 3:\n\nInput: cost = [2,4,6,2,4,6,4,4,4], target = 5\nOutput: \"0\"\nExplanation: It is impossible to paint any integer with total cost equal to target.\n\n\n \nConstraints:\n\n\n\tcost.length == 9\n\t1 <= cost[i], target <= 5000\n\n"
}