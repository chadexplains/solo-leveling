{
  "id": "map-sum-pairs",
  "name": "Map Sum Pairs",
  "tags": [
    "Hash Table",
    "String",
    "Design",
    "Trie"
  ],
  "description": "Design a map that allows you to do the following:\n\n\n\tMaps a string key to a given value.\n\tReturns the sum of the values that have a key with a prefix equal to a given string.\n\n\nImplement the MapSum class:\n\n\n\tMapSum() Initializes the MapSum object.\n\tvoid insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.\n\tint sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.\n\n\n \nExample 1:\n\nInput\n[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\nOutput\n[null, null, 3, null, 5]\n\nExplanation\nMapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);  \nmapSum.sum(\"ap\");           // return 3 (apple = 3)\nmapSum.insert(\"app\", 2);    \nmapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\n\n\n \nConstraints:\n\n\n\t1 <= key.length, prefix.length <= 50\n\tkey and prefix consist of only lowercase English letters.\n\t1 <= val <= 1000\n\tAt most 50 calls will be made to insert and sum.\n\n"
}