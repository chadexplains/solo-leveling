{
  "id": "determine-if-two-strings-are-close",
  "name": "Determine if Two Strings Are Close",
  "tags": [
    "Hash Table",
    "String",
    "Sorting"
  ],
  "description": "Two strings are considered close if you can attain one from the other using the following operations:\n\n\n\tOperation 1: Swap any two existing characters.\n\n\t\n\t\tFor example, abcde -> aecdb\n\t\n\t\n\tOperation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.\n\t\n\t\tFor example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)\n\t\n\t\n\n\nYou can use the operations on either string as many times as necessary.\n\nGiven two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.\n\n \nExample 1:\n\nInput: word1 = \"abc\", word2 = \"bca\"\nOutput: true\nExplanation: You can attain word2 from word1 in 2 operations.\nApply Operation 1: \"abc\" -> \"acb\"\nApply Operation 1: \"acb\" -> \"bca\"\n\n\nExample 2:\n\nInput: word1 = \"a\", word2 = \"aa\"\nOutput: false\nExplanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.\n\n\nExample 3:\n\nInput: word1 = \"cabbba\", word2 = \"abbccc\"\nOutput: true\nExplanation: You can attain word2 from word1 in 3 operations.\nApply Operation 1: \"cabbba\" -> \"caabbb\"\nApply Operation 2: \"caabbb\" -> \"baaccc\"\nApply Operation 2: \"baaccc\" -> \"abbccc\"\n\n\n \nConstraints:\n\n\n\t1 <= word1.length, word2.length <= 105\n\tword1 and word2 contain only lowercase English letters.\n\n"
}