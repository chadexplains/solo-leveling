{
  "id": "length-of-longest-fibonacci-subsequence",
  "name": "Length of Longest Fibonacci Subsequence",
  "tags": [
    "Array",
    "Hash Table",
    "Dynamic Programming"
  ],
  "description": "A sequence x1, x2, ..., xn is Fibonacci-like if:\n\n\n\tn >= 3\n\txi + xi+1 == xi+2 for all i + 2 <= n\n\n\nGiven a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.\n\nA subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].\n\n \nExample 1:\n\nInput: arr = [1,2,3,4,5,6,7,8]\nOutput: 5\nExplanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].\n\nExample 2:\n\nInput: arr = [1,3,7,11,12,14,18]\nOutput: 3\nExplanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].\n\n \nConstraints:\n\n\n\t3 <= arr.length <= 1000\n\t1 <= arr[i] < arr[i + 1] <= 109\n\n"
}