{
  "id": "recover-a-tree-from-preorder-traversal",
  "name": "Recover a Tree From Preorder Traversal",
  "tags": [
    "String",
    "Tree",
    "Depth-First Search",
    "Binary Tree"
  ],
  "description": "We run a preorder depth-first search (DFS) on the root of a binary tree.\n\nAt each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.\n\nIf a node has only one child, that child is guaranteed to be the left child.\n\nGiven the output traversal of this traversal, recover the tree and return its root.\n\n \nExample 1:\n\nInput: traversal = \"1-2--3--4-5--6--7\"\nOutput: [1,2,5,3,4,6,7]\n\n\nExample 2:\n\nInput: traversal = \"1-2--3---4-5--6---7\"\nOutput: [1,2,5,3,null,6,null,4,null,7]\n\n\nExample 3:\n\nInput: traversal = \"1-401--349---90--88\"\nOutput: [1,401,null,349,88,90]\n\n\n \nConstraints:\n\n\n\tThe number of nodes in the original tree is in the range [1, 1000].\n\t1 <= Node.val <= 109\n\n"
}