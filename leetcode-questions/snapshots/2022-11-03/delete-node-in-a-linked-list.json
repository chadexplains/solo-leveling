{
  "id": "delete-node-in-a-linked-list",
  "name": "Delete Node in a Linked List",
  "tags": [
    "Linked List"
  ],
  "description": "There is a singly-linked list head and we want to delete a node node in it.\n\nYou are given the node to be deleted node. You will not be given access to the first node of head.\n\nAll the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\n\nDelete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n\n\n\tThe value of the given node should not exist in the linked list.\n\tThe number of nodes in the linked list should decrease by one.\n\tAll the values before node should be in the same order.\n\tAll the values after node should be in the same order.\n\n\nCustom testing:\n\n\n\tFor the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.\n\tWe will build the linked list and pass the node to your function.\n\tThe output will be the entire list after calling your function.\n\n\n \nExample 1:\n\nInput: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n\n\nExample 2:\n\nInput: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\nExplanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n\n\n \nConstraints:\n\n\n\tThe number of the nodes in the given list is in the range [2, 1000].\n\t-1000 <= Node.val <= 1000\n\tThe value of each node in the list is unique.\n\tThe node to be deleted is in the list and is not a tail node.\n\n"
}