{
  "id": "maximum-number-of-robots-within-budget",
  "name": "Maximum Number of Robots Within Budget",
  "tags": [
    "Array",
    "Binary Search",
    "Queue",
    "Sliding Window",
    "Heap (Priority Queue)",
    "Prefix Sum"
  ],
  "description": "You have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget.\n\nThe total cost of running k chosen robots is equal to max(chargeTimes) + k * sum(runningCosts), where max(chargeTimes) is the largest charge cost among the k robots and sum(runningCosts) is the sum of running costs among the k robots.\n\nReturn the maximum number of consecutive robots you can run such that the total cost does not exceed budget.\n\n \nExample 1:\n\nInput: chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25\nOutput: 3\nExplanation: \nIt is possible to run all individual and consecutive pairs of robots within budget.\nTo obtain answer 3, consider the first 3 robots. The total cost will be max(3,6,1) + 3 * sum(2,1,3) = 6 + 3 * 6 = 24 which is less than 25.\nIt can be shown that it is not possible to run more than 3 consecutive robots within budget, so we return 3.\n\n\nExample 2:\n\nInput: chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19\nOutput: 0\nExplanation: No robot can be run that does not exceed the budget, so we return 0.\n\n\n \nConstraints:\n\n\n\tchargeTimes.length == runningCosts.length == n\n\t1 <= n <= 5 * 104\n\t1 <= chargeTimes[i], runningCosts[i] <= 105\n\t1 <= budget <= 1015\n\n"
}