{
  "id": "k-th-smallest-prime-fraction",
  "name": "K-th Smallest Prime Fraction",
  "tags": [
    "Array",
    "Binary Search",
    "Sorting",
    "Heap (Priority Queue)"
  ],
  "description": "You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.\n\nFor every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].\n\nReturn the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].\n\n \nExample 1:\n\nInput: arr = [1,2,3,5], k = 3\nOutput: [2,5]\nExplanation: The fractions to be considered in sorted order are:\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\nThe third fraction is 2/5.\n\n\nExample 2:\n\nInput: arr = [1,7], k = 1\nOutput: [1,7]\n\n\n \nConstraints:\n\n\n\t2 <= arr.length <= 1000\n\t1 <= arr[i] <= 3 * 104\n\tarr[0] == 1\n\tarr[i] is a prime number for i > 0.\n\tAll the numbers of arr are unique and sorted in strictly increasing order.\n\t1 <= k <= arr.length * (arr.length - 1) / 2\n\n\n \nFollow up: Can you solve the problem with better than O(n2) complexity?"
}