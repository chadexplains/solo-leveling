{
  "id": "iterator-for-combination",
  "name": "Iterator for Combination",
  "tags": [
    "String",
    "Backtracking",
    "Design",
    "Iterator"
  ],
  "description": "Design the CombinationIterator class:\n\n\n\tCombinationIterator(string characters, int combinationLength) Initializes the object with a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.\n\tnext() Returns the next combination of length combinationLength in lexicographical order.\n\thasNext() Returns true if and only if there exists a next combination.\n\n\n \nExample 1:\n\nInput\n[\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[\"abc\", 2], [], [], [], [], [], []]\nOutput\n[null, \"ab\", true, \"ac\", true, \"bc\", false]\n\nExplanation\nCombinationIterator itr = new CombinationIterator(\"abc\", 2);\nitr.next();    // return \"ab\"\nitr.hasNext(); // return True\nitr.next();    // return \"ac\"\nitr.hasNext(); // return True\nitr.next();    // return \"bc\"\nitr.hasNext(); // return False\n\n\n \nConstraints:\n\n\n\t1 <= combinationLength <= characters.length <= 15\n\tAll the characters of characters are unique.\n\tAt most 104 calls will be made to next and hasNext.\n\tIt is guaranteed that all calls of the function next are valid.\n\n"
}