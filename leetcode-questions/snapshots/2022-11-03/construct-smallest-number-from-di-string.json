{
  "id": "construct-smallest-number-from-di-string",
  "name": "Construct Smallest Number From DI String",
  "tags": [
    "String",
    "Backtracking",
    "Stack",
    "Greedy"
  ],
  "description": "You are given a 0-indexed string pattern of length n consisting of the characters 'I' meaning increasing and 'D' meaning decreasing.\n\nA 0-indexed string num of length n + 1 is created using the following conditions:\n\n\n\tnum consists of the digits '1' to '9', where each digit is used at most once.\n\tIf pattern[i] == 'I', then num[i] < num[i + 1].\n\tIf pattern[i] == 'D', then num[i] > num[i + 1].\n\n\nReturn the lexicographically smallest possible string num that meets the conditions.\n\n \nExample 1:\n\nInput: pattern = \"IIIDIDDD\"\nOutput: \"123549876\"\nExplanation:\nAt indices 0, 1, 2, and 4 we must have that num[i] < num[i+1].\nAt indices 3, 5, 6, and 7 we must have that num[i] > num[i+1].\nSome possible values of num are \"245639871\", \"135749862\", and \"123849765\".\nIt can be proven that \"123549876\" is the smallest possible num that meets the conditions.\nNote that \"123414321\" is not possible because the digit '1' is used more than once.\n\nExample 2:\n\nInput: pattern = \"DDD\"\nOutput: \"4321\"\nExplanation:\nSome possible values of num are \"9876\", \"7321\", and \"8742\".\nIt can be proven that \"4321\" is the smallest possible num that meets the conditions.\n\n\n \nConstraints:\n\n\n\t1 <= pattern.length <= 8\n\tpattern consists of only the letters 'I' and 'D'.\n\n"
}