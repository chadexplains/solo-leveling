{
  "id": "minimum-number-of-vertices-to-reach-all-nodes",
  "name": "Minimum Number of Vertices to Reach All Nodes",
  "tags": [
    "Graph"
  ],
  "description": "Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.\n\nFind the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.\n\nNotice that you can return the vertices in any order.\n\n \nExample 1:\n\n\n\nInput: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]\nOutput: [0,3]\nExplanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].\n\nExample 2:\n\n\n\nInput: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]\nOutput: [0,2,3]\nExplanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.\n\n\n \nConstraints:\n\n\n\t2 <= n <= 10^5\n\t1 <= edges.length <= min(10^5, n * (n - 1) / 2)\n\tedges[i].length == 2\n\t0 <= fromi, toi < n\n\tAll pairs (fromi, toi) are distinct.\n"
}