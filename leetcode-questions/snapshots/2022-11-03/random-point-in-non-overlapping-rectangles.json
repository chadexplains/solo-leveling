{
  "id": "random-point-in-non-overlapping-rectangles",
  "name": "Random Point in Non-overlapping Rectangles",
  "tags": [
    "Math",
    "Binary Search",
    "Reservoir Sampling",
    "Prefix Sum",
    "Ordered Set",
    "Randomized"
  ],
  "description": "You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\n\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\n\nNote that an integer point is a point that has integer coordinates.\n\nImplement the Solution class:\n\n\n\tSolution(int[][] rects) Initializes the object with the given rectangles rects.\n\tint[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.\n\n\n \nExample 1:\n\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\nOutput\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\n\nExplanation\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]\n\n\n \nConstraints:\n\n\n\t1 <= rects.length <= 100\n\trects[i].length == 4\n\t-109 <= ai < xi <= 109\n\t-109 <= bi < yi <= 109\n\txi - ai <= 2000\n\tyi - bi <= 2000\n\tAll the rectangles do not overlap.\n\tAt most 104 calls will be made to pick.\n\n"
}