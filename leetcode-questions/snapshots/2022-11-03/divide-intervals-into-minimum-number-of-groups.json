{
  "id": "divide-intervals-into-minimum-number-of-groups",
  "name": "Divide Intervals Into Minimum Number of Groups",
  "tags": [
    "Array",
    "Two Pointers",
    "Greedy",
    "Sorting",
    "Heap (Priority Queue)",
    "Prefix Sum"
  ],
  "description": "You are given a 2D integer array intervals where intervals[i] = [lefti, righti] represents the inclusive interval [lefti, righti].\n\nYou have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other.\n\nReturn the minimum number of groups you need to make.\n\nTwo intervals intersect if there is at least one common number between them. For example, the intervals [1, 5] and [5, 8] intersect.\n\n \nExample 1:\n\nInput: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]\nOutput: 3\nExplanation: We can divide the intervals into the following groups:\n- Group 1: [1, 5], [6, 8].\n- Group 2: [2, 3], [5, 10].\n- Group 3: [1, 10].\nIt can be proven that it is not possible to divide the intervals into fewer than 3 groups.\n\n\nExample 2:\n\nInput: intervals = [[1,3],[5,6],[8,10],[11,13]]\nOutput: 1\nExplanation: None of the intervals overlap, so we can put all of them in one group.\n\n\n \nConstraints:\n\n\n\t1 <= intervals.length <= 105\n\tintervals[i].length == 2\n\t1 <= lefti <= righti <= 106\n\n"
}