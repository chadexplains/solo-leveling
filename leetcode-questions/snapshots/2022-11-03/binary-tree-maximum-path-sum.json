{
  "id": "binary-tree-maximum-path-sum",
  "name": "Binary Tree Maximum Path Sum",
  "tags": [
    "Dynamic Programming",
    "Tree",
    "Depth-First Search",
    "Binary Tree"
  ],
  "description": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\n\nThe path sum of a path is the sum of the node's values in the path.\n\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\n\n \nExample 1:\n\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n\n\nExample 2:\n\nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n\n\n \nConstraints:\n\n\n\tThe number of nodes in the tree is in the range [1, 3 * 104].\n\t-1000 <= Node.val <= 1000\n\n"
}