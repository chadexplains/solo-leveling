{
  "id": "kth-smallest-element-in-a-bst",
  "name": "Kth Smallest Element in a BST",
  "tags": [
    "Tree",
    "Depth-First Search",
    "Binary Search Tree",
    "Binary Tree"
  ],
  "description": "Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\n\n \nExample 1:\n\nInput: root = [3,1,4,null,2], k = 1\nOutput: 1\n\n\nExample 2:\n\nInput: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n\n\n \nConstraints:\n\n\n\tThe number of nodes in the tree is n.\n\t1 <= k <= n <= 104\n\t0 <= Node.val <= 104\n\n\n \nFollow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?\n"
}