{
  "id": "validate-binary-tree-nodes",
  "name": "Validate Binary Tree Nodes",
  "tags": [
    "Tree",
    "Depth-First Search",
    "Breadth-First Search",
    "Union Find",
    "Graph",
    "Binary Tree"
  ],
  "description": "You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.\n\nIf node i has no left child then leftChild[i] will equal -1, similarly for the right child.\n\nNote that the nodes have no values and that we only use the node numbers in this problem.\n\n \nExample 1:\n\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\nOutput: true\n\n\nExample 2:\n\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\nOutput: false\n\n\nExample 3:\n\nInput: n = 2, leftChild = [1,0], rightChild = [-1,-1]\nOutput: false\n\n\n \nConstraints:\n\n\n\tn == leftChild.length == rightChild.length\n\t1 <= n <= 104\n\t-1 <= leftChild[i], rightChild[i] <= n - 1\n\n"
}