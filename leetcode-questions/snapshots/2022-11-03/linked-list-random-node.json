{
  "id": "linked-list-random-node",
  "name": "Linked List Random Node",
  "tags": [
    "Linked List",
    "Math",
    "Reservoir Sampling",
    "Randomized"
  ],
  "description": "Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\n\nImplement the Solution class:\n\n\n\tSolution(ListNode head) Initializes the object with the head of the singly-linked list head.\n\tint getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.\n\n\n \nExample 1:\n\nInput\n[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 3, 2, 2, 3]\n\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n\n\n \nConstraints:\n\n\n\tThe number of nodes in the linked list will be in the range [1, 104].\n\t-104 <= Node.val <= 104\n\tAt most 104 calls will be made to getRandom.\n\n\n \nFollow up:\n\n\n\tWhat if the linked list is extremely large and its length is unknown to you?\n\tCould you solve this efficiently without using extra space?\n\n"
}