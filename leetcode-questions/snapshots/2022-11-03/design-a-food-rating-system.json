{
  "id": "design-a-food-rating-system",
  "name": "Design a Food Rating System",
  "tags": [
    "Hash Table",
    "Design",
    "Heap (Priority Queue)",
    "Ordered Set"
  ],
  "description": "Design a food rating system that can do the following:\n\n\n\tModify the rating of a food item listed in the system.\n\tReturn the highest-rated food item for a type of cuisine in the system.\n\n\nImplement the FoodRatings class:\n\n\n\tFoodRatings(String[] foods, String[] cuisines, int[] ratings) Initializes the system. The food items are described by foods, cuisines and ratings, all of which have a length of n.\n\n\t\n\t\tfoods[i] is the name of the ith food,\n\t\tcuisines[i] is the type of cuisine of the ith food, and\n\t\tratings[i] is the initial rating of the ith food.\n\t\n\t\n\tvoid changeRating(String food, int newRating) Changes the rating of the food item with the name food.\n\tString highestRated(String cuisine) Returns the name of the food item that has the highest rating for the given type of cuisine. If there is a tie, return the item with the lexicographically smaller name.\n\n\nNote that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.\n\n \nExample 1:\n\nInput\n[\"FoodRatings\", \"highestRated\", \"highestRated\", \"changeRating\", \"highestRated\", \"changeRating\", \"highestRated\"]\n[[[\"kimchi\", \"miso\", \"sushi\", \"moussaka\", \"ramen\", \"bulgogi\"], [\"korean\", \"japanese\", \"japanese\", \"greek\", \"japanese\", \"korean\"], [9, 12, 8, 15, 14, 7]], [\"korean\"], [\"japanese\"], [\"sushi\", 16], [\"japanese\"], [\"ramen\", 16], [\"japanese\"]]\nOutput\n[null, \"kimchi\", \"ramen\", null, \"sushi\", null, \"ramen\"]\n\nExplanation\nFoodRatings foodRatings = new FoodRatings([\"kimchi\", \"miso\", \"sushi\", \"moussaka\", \"ramen\", \"bulgogi\"], [\"korean\", \"japanese\", \"japanese\", \"greek\", \"japanese\", \"korean\"], [9, 12, 8, 15, 14, 7]);\nfoodRatings.highestRated(\"korean\"); // return \"kimchi\"\n                                    // \"kimchi\" is the highest rated korean food with a rating of 9.\nfoodRatings.highestRated(\"japanese\"); // return \"ramen\"\n                                      // \"ramen\" is the highest rated japanese food with a rating of 14.\nfoodRatings.changeRating(\"sushi\", 16); // \"sushi\" now has a rating of 16.\nfoodRatings.highestRated(\"japanese\"); // return \"sushi\"\n                                      // \"sushi\" is the highest rated japanese food with a rating of 16.\nfoodRatings.changeRating(\"ramen\", 16); // \"ramen\" now has a rating of 16.\nfoodRatings.highestRated(\"japanese\"); // return \"ramen\"\n                                      // Both \"sushi\" and \"ramen\" have a rating of 16.\n                                      // However, \"ramen\" is lexicographically smaller than \"sushi\".\n\n\n \nConstraints:\n\n\n\t1 <= n <= 2 * 104\n\tn == foods.length == cuisines.length == ratings.length\n\t1 <= foods[i].length, cuisines[i].length <= 10\n\tfoods[i], cuisines[i] consist of lowercase English letters.\n\t1 <= ratings[i] <= 108\n\tAll the strings in foods are distinct.\n\tfood will be the name of a food item in the system across all calls to changeRating.\n\tcuisine will be a type of cuisine of at least one food item in the system across all calls to highestRated.\n\tAt most 2 * 104 calls in total will be made to changeRating and highestRated.\n\n"
}