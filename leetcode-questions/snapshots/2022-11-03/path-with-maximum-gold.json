{
  "id": "path-with-maximum-gold",
  "name": "Path with Maximum Gold",
  "tags": [
    "Array",
    "Backtracking",
    "Matrix"
  ],
  "description": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\n\nReturn the maximum amount of gold you can collect under the conditions:\n\n\n\tEvery time you are located in a cell you will collect all the gold in that cell.\n\tFrom your position, you can walk one step to the left, right, up, or down.\n\tYou can't visit the same cell more than once.\n\tNever visit a cell with 0 gold.\n\tYou can start and stop collecting gold from any position in the grid that has some gold.\n\n\n \nExample 1:\n\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7.\n\n\nExample 2:\n\nInput: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.\n\n\n \nConstraints:\n\n\n\tm == grid.length\n\tn == grid[i].length\n\t1 <= m, n <= 15\n\t0 <= grid[i][j] <= 100\n\tThere are at most 25 cells containing gold.\n\n"
}