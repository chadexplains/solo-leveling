{
  "id": "online-election",
  "name": "Online Election",
  "tags": [
    "Array",
    "Hash Table",
    "Binary Search",
    "Design"
  ],
  "description": "You are given two integer arrays persons and times. In an election, the ith vote was cast for persons[i] at time times[i].\n\nFor each query at a time t, find the person that was leading the election at time t. Votes cast at time t will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.\n\nImplement the TopVotedCandidate class:\n\n\n\tTopVotedCandidate(int[] persons, int[] times) Initializes the object with the persons and times arrays.\n\tint q(int t) Returns the number of the person that was leading the election at time t according to the mentioned rules.\n\n\n \nExample 1:\n\nInput\n[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]\n[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]\nOutput\n[null, 0, 1, 1, 0, 0, 1]\n\nExplanation\nTopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);\ntopVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.\ntopVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.\ntopVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\ntopVotedCandidate.q(15); // return 0\ntopVotedCandidate.q(24); // return 0\ntopVotedCandidate.q(8); // return 1\n\n\n\n \nConstraints:\n\n\n\t1 <= persons.length <= 5000\n\ttimes.length == persons.length\n\t0 <= persons[i] < persons.length\n\t0 <= times[i] <= 109\n\ttimes is sorted in a strictly increasing order.\n\ttimes[0] <= t <= 109\n\tAt most 104 calls will be made to q.\n\n"
}