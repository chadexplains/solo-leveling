{
  "id": "maximum-candies-you-can-get-from-boxes",
  "name": "Maximum Candies You Can Get from Boxes",
  "tags": [
    "Array",
    "Breadth-First Search",
    "Graph"
  ],
  "description": "You have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:\n\n\n\tstatus[i] is 1 if the ith box is open and 0 if the ith box is closed,\n\tcandies[i] is the number of candies in the ith box,\n\tkeys[i] is a list of the labels of the boxes you can open after opening the ith box.\n\tcontainedBoxes[i] is a list of the boxes you found inside the ith box.\n\n\nYou are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\n\nReturn the maximum number of candies you can get following the rules above.\n\n \nExample 1:\n\nInput: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\nOutput: 16\nExplanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2.\nBox 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\nTotal number of candies collected = 7 + 4 + 5 = 16 candy.\n\n\nExample 2:\n\nInput: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]\nOutput: 6\nExplanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys.\nThe total number of candies will be 6.\n\n\n \nConstraints:\n\n\n\tn == status.length == candies.length == keys.length == containedBoxes.length\n\t1 <= n <= 1000\n\tstatus[i] is either 0 or 1.\n\t1 <= candies[i] <= 1000\n\t0 <= keys[i].length <= n\n\t0 <= keys[i][j] < n\n\tAll values of keys[i] are unique.\n\t0 <= containedBoxes[i].length <= n\n\t0 <= containedBoxes[i][j] < n\n\tAll values of containedBoxes[i] are unique.\n\tEach box is contained in one box at most.\n\t0 <= initialBoxes.length <= n\n\t0 <= initialBoxes[i] < n\n\n"
}