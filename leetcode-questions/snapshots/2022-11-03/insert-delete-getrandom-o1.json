{
  "id": "insert-delete-getrandom-o1",
  "name": "Insert Delete GetRandom O(1)",
  "tags": [
    "Array",
    "Hash Table",
    "Math",
    "Design",
    "Randomized"
  ],
  "description": "Implement the RandomizedSet class:\n\n\n\tRandomizedSet() Initializes the RandomizedSet object.\n\tbool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.\n\tbool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.\n\tint getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.\n\n\nYou must implement the functions of the class such that each function works in average O(1) time complexity.\n\n \nExample 1:\n\nInput\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\nOutput\n[null, true, false, true, 2, true, false, 2]\n\nExplanation\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n\n\n \nConstraints:\n\n\n\t-231 <= val <= 231 - 1\n\tAt most 2 * 105 calls will be made to insert, remove, and getRandom.\n\tThere will be at least one element in the data structure when getRandom is called.\n\n"
}