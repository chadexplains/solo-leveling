{
  "id": "k-highest-ranked-items-within-a-price-range",
  "name": "K Highest Ranked Items Within a Price Range",
  "tags": [
    "Array",
    "Breadth-First Search",
    "Sorting",
    "Heap (Priority Queue)",
    "Matrix"
  ],
  "description": "You are given a 0-indexed 2D integer array grid of size m x n that represents a map of the items in a shop. The integers in the grid represent the following:\n\n\n\t0 represents a wall that you cannot pass through.\n\t1 represents an empty cell that you can freely move to and from.\n\tAll other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells.\n\n\nIt takes 1 step to travel between adjacent grid cells.\n\nYou are also given integer arrays pricing and start where pricing = [low, high] and start = [row, col] indicates that you start at the position (row, col) and are interested only in items with a price in the range of [low, high] (inclusive). You are further given an integer k.\n\nYou are interested in the positions of the k highest-ranked items whose prices are within the given price range. The rank is determined by the first of these criteria that is different:\n\n\n\tDistance, defined as the length of the shortest path from the start (shorter distance has a higher rank).\n\tPrice (lower price has a higher rank, but it must be in the price range).\n\tThe row number (smaller row number has a higher rank).\n\tThe column number (smaller column number has a higher rank).\n\n\nReturn the k highest-ranked items within the price range sorted by their rank (highest to lowest). If there are fewer than k reachable items within the price range, return all of them.\n\n \nExample 1:\n\nInput: grid = [[1,2,0,1],[1,3,0,1],[0,2,5,1]], pricing = [2,5], start = [0,0], k = 3\nOutput: [[0,1],[1,1],[2,1]]\nExplanation: You start at (0,0).\nWith a price range of [2,5], we can take items from (0,1), (1,1), (2,1) and (2,2).\nThe ranks of these items are:\n- (0,1) with distance 1\n- (1,1) with distance 2\n- (2,1) with distance 3\n- (2,2) with distance 4\nThus, the 3 highest ranked items in the price range are (0,1), (1,1), and (2,1).\n\n\nExample 2:\n\nInput: grid = [[1,2,0,1],[1,3,3,1],[0,2,5,1]], pricing = [2,3], start = [2,3], k = 2\nOutput: [[2,1],[1,2]]\nExplanation: You start at (2,3).\nWith a price range of [2,3], we can take items from (0,1), (1,1), (1,2) and (2,1).\nThe ranks of these items are:\n- (2,1) with distance 2, price 2\n- (1,2) with distance 2, price 3\n- (1,1) with distance 3\n- (0,1) with distance 4\nThus, the 2 highest ranked items in the price range are (2,1) and (1,2).\n\n\nExample 3:\n\nInput: grid = [[1,1,1],[0,0,1],[2,3,4]], pricing = [2,3], start = [0,0], k = 3\nOutput: [[2,1],[2,0]]\nExplanation: You start at (0,0).\nWith a price range of [2,3], we can take items from (2,0) and (2,1). \nThe ranks of these items are: \n- (2,1) with distance 5\n- (2,0) with distance 6\nThus, the 2 highest ranked items in the price range are (2,1) and (2,0). \nNote that k = 3 but there are only 2 reachable items within the price range.\n\n\n \nConstraints:\n\n\n\tm == grid.length\n\tn == grid[i].length\n\t1 <= m, n <= 105\n\t1 <= m * n <= 105\n\t0 <= grid[i][j] <= 105\n\tpricing.length == 2\n\t2 <= low <= high <= 105\n\tstart.length == 2\n\t0 <= row <= m - 1\n\t0 <= col <= n - 1\n\tgrid[row][col] > 0\n\t1 <= k <= m * n\n\n"
}