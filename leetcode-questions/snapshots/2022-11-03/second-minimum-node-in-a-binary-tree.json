{
  "id": "second-minimum-node-in-a-binary-tree",
  "name": "Second Minimum Node In a Binary Tree",
  "tags": [
    "Tree",
    "Depth-First Search",
    "Binary Tree"
  ],
  "description": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.\n\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.\n\nIf no such second minimum value exists, output -1 instead.\n\n \n\n \nExample 1:\n\nInput: root = [2,2,5,null,null,5,7]\nOutput: 5\nExplanation: The smallest value is 2, the second smallest value is 5.\n\n\nExample 2:\n\nInput: root = [2,2,2]\nOutput: -1\nExplanation: The smallest value is 2, but there isn't any second smallest value.\n\n\n \nConstraints:\n\n\n\tThe number of nodes in the tree is in the range [1, 25].\n\t1 <= Node.val <= 231 - 1\n\troot.val == min(root.left.val, root.right.val) for each internal node of the tree.\n\n"
}