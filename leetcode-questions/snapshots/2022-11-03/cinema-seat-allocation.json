{
  "id": "cinema-seat-allocation",
  "name": "Cinema Seat Allocation",
  "tags": [
    "Array",
    "Hash Table",
    "Greedy",
    "Bit Manipulation"
  ],
  "description": "\n\nA cinema has n rows of seats, numbered from 1 to n and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.\n\nGiven the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8] means the seat located in row 3 and labelled with 8 is already reserved.\n\nReturn the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.\n\n \nExample 1:\n\n\n\nInput: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\nOutput: 4\nExplanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.\n\n\nExample 2:\n\nInput: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\nOutput: 2\n\n\nExample 3:\n\nInput: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\nOutput: 4\n\n\n \nConstraints:\n\n\n\t1 <= n <= 10^9\n\t1 <= reservedSeats.length <= min(10*n, 10^4)\n\treservedSeats[i].length == 2\n\t1 <= reservedSeats[i][0] <= n\n\t1 <= reservedSeats[i][1] <= 10\n\tAll reservedSeats[i] are distinct.\n\n"
}