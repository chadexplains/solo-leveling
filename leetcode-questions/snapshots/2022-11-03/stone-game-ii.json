{
  "id": "stone-game-ii",
  "name": "Stone Game II",
  "tags": [
    "Array",
    "Math",
    "Dynamic Programming",
    "Game Theory"
  ],
  "description": "Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones. \n\nAlice and Bob take turns, with Alice starting first.  Initially, M = 1.\n\nOn each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X).\n\nThe game continues until all the stones have been taken.\n\nAssuming Alice and Bob play optimally, return the maximum number of stones Alice can get.\n\n \nExample 1:\n\nInput: piles = [2,7,9,4,4]\nOutput: 10\nExplanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. \n\n\nExample 2:\n\nInput: piles = [1,2,3,4,5,100]\nOutput: 104\n\n\n \nConstraints:\n\n\n\t1 <= piles.length <= 100\n\t1 <= piles[i] <= 104\n\n"
}