{
  "id": "design-a-text-editor",
  "name": "Design a Text Editor",
  "tags": [
    "Linked List",
    "String",
    "Stack",
    "Design",
    "Simulation",
    "Doubly-Linked List"
  ],
  "description": "Design a text editor with a cursor that can do the following:\n\n\n\tAdd text to where the cursor is.\n\tDelete text from where the cursor is (simulating the backspace key).\n\tMove the cursor either left or right.\n\n\nWhen deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that 0 <= cursor.position <= currentText.length always holds.\n\nImplement the TextEditor class:\n\n\n\tTextEditor() Initializes the object with empty text.\n\tvoid addText(string text) Appends text to where the cursor is. The cursor ends to the right of text.\n\tint deleteText(int k) Deletes k characters to the left of the cursor. Returns the number of characters actually deleted.\n\tstring cursorLeft(int k) Moves the cursor to the left k times. Returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor.\n\tstring cursorRight(int k) Moves the cursor to the right k times. Returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor.\n\n\n \nExample 1:\n\nInput\n[\"TextEditor\", \"addText\", \"deleteText\", \"addText\", \"cursorRight\", \"cursorLeft\", \"deleteText\", \"cursorLeft\", \"cursorRight\"]\n[[], [\"leetcode\"], [4], [\"practice\"], [3], [8], [10], [2], [6]]\nOutput\n[null, null, 4, null, \"etpractice\", \"leet\", 4, \"\", \"practi\"]\n\nExplanation\nTextEditor textEditor = new TextEditor(); // The current text is \"|\". (The '|' character represents the cursor)\ntextEditor.addText(\"leetcode\"); // The current text is \"leetcode|\".\ntextEditor.deleteText(4); // return 4\n                          // The current text is \"leet|\". \n                          // 4 characters were deleted.\ntextEditor.addText(\"practice\"); // The current text is \"leetpractice|\". \ntextEditor.cursorRight(3); // return \"etpractice\"\n                           // The current text is \"leetpractice|\". \n                           // The cursor cannot be moved beyond the actual text and thus did not move.\n                           // \"etpractice\" is the last 10 characters to the left of the cursor.\ntextEditor.cursorLeft(8); // return \"leet\"\n                          // The current text is \"leet|practice\".\n                          // \"leet\" is the last min(10, 4) = 4 characters to the left of the cursor.\ntextEditor.deleteText(10); // return 4\n                           // The current text is \"|practice\".\n                           // Only 4 characters were deleted.\ntextEditor.cursorLeft(2); // return \"\"\n                          // The current text is \"|practice\".\n                          // The cursor cannot be moved beyond the actual text and thus did not move. \n                          // \"\" is the last min(10, 0) = 0 characters to the left of the cursor.\ntextEditor.cursorRight(6); // return \"practi\"\n                           // The current text is \"practi|ce\".\n                           // \"practi\" is the last min(10, 6) = 6 characters to the left of the cursor.\n\n\n \nConstraints:\n\n\n\t1 <= text.length, k <= 40\n\ttext consists of lowercase English letters.\n\tAt most 2 * 104 calls in total will be made to addText, deleteText, cursorLeft and cursorRight.\n\n\n \nFollow-up: Could you find a solution with time complexity of O(k) per call?\n"
}