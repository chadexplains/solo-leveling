{
  "id": "all-paths-from-source-to-target",
  "name": "All Paths From Source to Target",
  "tags": [
    "Backtracking",
    "Depth-First Search",
    "Breadth-First Search",
    "Graph"
  ],
  "description": "Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.\n\nThe graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).\n\n \nExample 1:\n\nInput: graph = [[1,2],[3],[3],[]]\nOutput: [[0,1,3],[0,2,3]]\nExplanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.\n\n\nExample 2:\n\nInput: graph = [[4,3,1],[3,2,4],[3],[4],[]]\nOutput: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n\n\n \nConstraints:\n\n\n\tn == graph.length\n\t2 <= n <= 15\n\t0 <= graph[i][j] < n\n\tgraph[i][j] != i (i.e., there will be no self-loops).\n\tAll the elements of graph[i] are unique.\n\tThe input graph is guaranteed to be a DAG.\n\n"
}