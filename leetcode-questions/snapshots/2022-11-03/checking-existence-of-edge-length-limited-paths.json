{
  "id": "checking-existence-of-edge-length-limited-paths",
  "name": "Checking Existence of Edge Length Limited Paths",
  "tags": [
    "Array",
    "Union Find",
    "Graph",
    "Sorting"
  ],
  "description": "An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. Note that there may be multiple edges between two nodes.\n\nGiven an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj .\n\nReturn a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.\n\n \nExample 1:\n\nInput: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]\nOutput: [false,true]\nExplanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\nFor the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.\n\n\nExample 2:\n\nInput: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]\nOutput: [true,false]\nExaplanation: The above figure shows the given graph.\n\n\n \nConstraints:\n\n\n\t2 <= n <= 105\n\t1 <= edgeList.length, queries.length <= 105\n\tedgeList[i].length == 3\n\tqueries[j].length == 3\n\t0 <= ui, vi, pj, qj <= n - 1\n\tui != vi\n\tpj != qj\n\t1 <= disi, limitj <= 109\n\tThere may be multiple edges between two nodes.\n\n"
}