{
  "id": "longest-increasing-path-in-a-matrix",
  "name": "Longest Increasing Path in a Matrix",
  "tags": [
    "Array",
    "Dynamic Programming",
    "Depth-First Search",
    "Breadth-First Search",
    "Graph",
    "Topological Sort",
    "Memoization",
    "Matrix"
  ],
  "description": "Given an m x n integers matrix, return the length of the longest increasing path in matrix.\n\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\n\n \nExample 1:\n\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is [1, 2, 6, 9].\n\n\nExample 2:\n\nInput: matrix = [[3,4,5],[3,2,6],[2,2,1]]\nOutput: 4\nExplanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n\n\nExample 3:\n\nInput: matrix = [[1]]\nOutput: 1\n\n\n \nConstraints:\n\n\n\tm == matrix.length\n\tn == matrix[i].length\n\t1 <= m, n <= 200\n\t0 <= matrix[i][j] <= 231 - 1\n\n"
}