{
  "id": "maximum-frequency-stack",
  "name": "Maximum Frequency Stack",
  "tags": [
    "Hash Table",
    "Stack",
    "Design",
    "Ordered Set"
  ],
  "description": "Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\n\nImplement the FreqStack class:\n\n\n\tFreqStack() constructs an empty frequency stack.\n\tvoid push(int val) pushes an integer val onto the top of the stack.\n\tint pop() removes and returns the most frequent element in the stack.\n\t\n\t\tIf there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.\n\t\n\t\n\n\n \nExample 1:\n\nInput\n[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\nOutput\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\n\nExplanation\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].\n\n\n \nConstraints:\n\n\n\t0 <= val <= 109\n\tAt most 2 * 104 calls will be made to push and pop.\n\tIt is guaranteed that there will be at least one element in the stack before calling pop.\n\n"
}