{
  "id": "interleaving-string",
  "name": "Interleaving String",
  "tags": [
    "String",
    "Dynamic Programming"
  ],
  "description": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\n\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\n\n\n\ts = s1 + s2 + ... + sn\n\tt = t1 + t2 + ... + tm\n\t|n - m| <= 1\n\tThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\n\n\nNote: a + b is the concatenation of strings a and b.\n\n \nExample 1:\n\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\nOutput: true\nExplanation: One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n\n\nExample 2:\n\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\nOutput: false\nExplanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n\n\nExample 3:\n\nInput: s1 = \"\", s2 = \"\", s3 = \"\"\nOutput: true\n\n\n \nConstraints:\n\n\n\t0 <= s1.length, s2.length <= 100\n\t0 <= s3.length <= 200\n\ts1, s2, and s3 consist of lowercase English letters.\n\n\n \nFollow up: Could you solve it using only O(s2.length) additional memory space?\n"
}