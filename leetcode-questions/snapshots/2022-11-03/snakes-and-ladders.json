{
  "id": "snakes-and-ladders",
  "name": "Snakes and Ladders",
  "tags": [
    "Array",
    "Breadth-First Search",
    "Matrix"
  ],
  "description": "You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.\n\nYou start on square 1 of the board. In each move, starting from square curr, do the following:\n\n\n\tChoose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].\n\n\t\n\t\tThis choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.\n\t\n\t\n\tIf next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.\n\tThe game ends when you reach the square n2.\n\n\nA board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 do not have a snake or ladder.\n\nNote that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.\n\n\n\tFor example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.\n\n\nReturn the least number of moves required to reach the square n2. If it is not possible to reach the square, return -1.\n\n \nExample 1:\n\nInput: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]\nOutput: 4\nExplanation: \nIn the beginning, you start at square 1 (at row 5, column 0).\nYou decide to move to square 2 and must take the ladder to square 15.\nYou then decide to move to square 17 and must take the snake to square 13.\nYou then decide to move to square 14 and must take the ladder to square 35.\nYou then decide to move to square 36, ending the game.\nThis is the lowest possible number of moves to reach the last square, so return 4.\n\n\nExample 2:\n\nInput: board = [[-1,-1],[-1,3]]\nOutput: 1\n\n\n \nConstraints:\n\n\n\tn == board.length == board[i].length\n\t2 <= n <= 20\n\tgrid[i][j] is either -1 or in the range [1, n2].\n\tThe squares labeled 1 and n2 do not have any ladders or snakes.\n\n"
}