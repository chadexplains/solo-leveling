{
  "id": "maximum-value-of-k-coins-from-piles",
  "name": "Maximum Value of K Coins From Piles",
  "tags": [
    "Array",
    "Dynamic Programming",
    "Prefix Sum"
  ],
  "description": "There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.\n\nIn one move, you can choose any coin on top of any pile, remove it, and add it to your wallet.\n\nGiven a list piles, where piles[i] is a list of integers denoting the composition of the ith pile from top to bottom, and a positive integer k, return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally.\n\n \nExample 1:\n\nInput: piles = [[1,100,3],[7,8,9]], k = 2\nOutput: 101\nExplanation:\nThe above diagram shows the different ways we can choose k coins.\nThe maximum total we can obtain is 101.\n\n\nExample 2:\n\nInput: piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7\nOutput: 706\nExplanation:\nThe maximum total can be obtained if we choose all coins from the last pile.\n\n\n \nConstraints:\n\n\n\tn == piles.length\n\t1 <= n <= 1000\n\t1 <= piles[i][j] <= 105\n\t1 <= k <= sum(piles[i].length) <= 2000\n\n"
}