{
  "id": "longest-common-subpath",
  "name": "Longest Common Subpath",
  "tags": [
    "Array",
    "Binary Search",
    "Rolling Hash",
    "Suffix Array",
    "Hash Function"
  ],
  "description": "There is a country of n cities numbered from 0 to n - 1. In this country, there is a road connecting every pair of cities.\n\nThere are m friends numbered from 0 to m - 1 who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city more than once, but the same city will not be listed consecutively.\n\nGiven an integer n and a 2D integer array paths where paths[i] is an integer array representing the path of the ith friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all.\n\nA subpath of a path is a contiguous sequence of cities within that path.\n\n \nExample 1:\n\nInput: n = 5, paths = [[0,1,2,3,4],\n                       [2,3,4],\n                       [4,0,1,2,3]]\nOutput: 2\nExplanation: The longest common subpath is [2,3].\n\n\nExample 2:\n\nInput: n = 3, paths = [[0],[1],[2]]\nOutput: 0\nExplanation: There is no common subpath shared by the three paths.\n\n\nExample 3:\n\nInput: n = 5, paths = [[0,1,2,3,4],\n                       [4,3,2,1,0]]\nOutput: 1\nExplanation: The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1.\n\n \nConstraints:\n\n\n\t1 <= n <= 105\n\tm == paths.length\n\t2 <= m <= 105\n\tsum(paths[i].length) <= 105\n\t0 <= paths[i][j] < n\n\tThe same city is not listed multiple times consecutively in paths[i].\n\n"
}