{
  "id": "shortest-path-in-binary-matrix",
  "name": "Shortest Path in Binary Matrix",
  "tags": [
    "Array",
    "Breadth-First Search",
    "Matrix"
  ],
  "description": "Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.\n\nA clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:\n\n\n\tAll the visited cells of the path are 0.\n\tAll the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).\n\n\nThe length of a clear path is the number of visited cells of this path.\n\n \nExample 1:\n\nInput: grid = [[0,1],[1,0]]\nOutput: 2\n\n\nExample 2:\n\nInput: grid = [[0,0,0],[1,1,0],[1,1,0]]\nOutput: 4\n\n\nExample 3:\n\nInput: grid = [[1,0,0],[1,1,0],[1,1,0]]\nOutput: -1\n\n\n \nConstraints:\n\n\n\tn == grid.length\n\tn == grid[i].length\n\t1 <= n <= 100\n\tgrid[i][j] is 0 or 1\n\n"
}