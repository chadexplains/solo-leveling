{
  "id": "maximum-sum-of-3-non-overlapping-subarrays",
  "name": "Maximum Sum of 3 Non-Overlapping Subarrays",
  "tags": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.\n\nReturn the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.\n\n \nExample 1:\n\nInput: nums = [1,2,1,2,6,7,5,1], k = 2\nOutput: [0,3,5]\nExplanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\n\n\nExample 2:\n\nInput: nums = [1,2,1,2,1,2,1,2,1], k = 2\nOutput: [0,2,4]\n\n\n \nConstraints:\n\n\n\t1 <= nums.length <= 2 * 104\n\t1 <= nums[i] < 216\n\t1 <= k <= floor(nums.length / 3)\n\n"
}