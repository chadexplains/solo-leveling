{
  "id": "number-of-recent-calls",
  "name": "Number of Recent Calls",
  "tags": [
    "Design",
    "Queue",
    "Data Stream"
  ],
  "description": "You have a RecentCounter class which counts the number of recent requests within a certain time frame.\n\nImplement the RecentCounter class:\n\n\n\tRecentCounter() Initializes the counter with zero recent requests.\n\tint ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].\n\n\nIt is guaranteed that every call to ping uses a strictly larger value of t than the previous call.\n\n \nExample 1:\n\nInput\n[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n[[], [1], [100], [3001], [3002]]\nOutput\n[null, 1, 2, 3, 3]\n\nExplanation\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1\nrecentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2\nrecentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3\nrecentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3\n\n\n \nConstraints:\n\n\n\t1 <= t <= 109\n\tEach test case will call ping with strictly increasing values of t.\n\tAt most 104 calls will be made to ping.\n\n"
}