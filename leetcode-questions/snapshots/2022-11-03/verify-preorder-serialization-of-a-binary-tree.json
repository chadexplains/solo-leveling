{
  "id": "verify-preorder-serialization-of-a-binary-tree",
  "name": "Verify Preorder Serialization of a Binary Tree",
  "tags": [
    "String",
    "Stack",
    "Tree",
    "Binary Tree"
  ],
  "description": "One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.\n\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where '#' represents a null node.\n\nGiven a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\n\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.\n\nYou may assume that the input format is always valid.\n\n\n\tFor example, it could never contain two consecutive commas, such as \"1,,3\".\n\n\nNote: You are not allowed to reconstruct the tree.\n\n \nExample 1:\nInput: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\nOutput: true\nExample 2:\nInput: preorder = \"1,#\"\nOutput: false\nExample 3:\nInput: preorder = \"9,#,#,1\"\nOutput: false\n\n \nConstraints:\n\n\n\t1 <= preorder.length <= 104\n\tpreorder consist of integers in the range [0, 100] and '#' separated by commas ','.\n\n"
}