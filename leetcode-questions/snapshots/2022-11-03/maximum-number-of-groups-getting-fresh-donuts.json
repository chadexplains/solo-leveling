{
  "id": "maximum-number-of-groups-getting-fresh-donuts",
  "name": "Maximum Number of Groups Getting Fresh Donuts",
  "tags": [
    "Array",
    "Dynamic Programming",
    "Bit Manipulation",
    "Memoization",
    "Bitmask"
  ],
  "description": "There is a donuts shop that bakes donuts in batches of batchSize. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer batchSize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. Each customer will get exactly one donut.\n\nWhen a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.\n\nYou can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.\n\n \nExample 1:\n\nInput: batchSize = 3, groups = [1,2,3,4,5,6]\nOutput: 4\nExplanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy.\n\n\nExample 2:\n\nInput: batchSize = 4, groups = [1,3,2,5,2,2,1,6]\nOutput: 4\n\n\n \nConstraints:\n\n\n\t1 <= batchSize <= 9\n\t1 <= groups.length <= 30\n\t1 <= groups[i] <= 109\n\n"
}