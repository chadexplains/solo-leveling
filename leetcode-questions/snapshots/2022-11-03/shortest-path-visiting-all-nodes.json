{
  "id": "shortest-path-visiting-all-nodes",
  "name": "Shortest Path Visiting All Nodes",
  "tags": [
    "Dynamic Programming",
    "Bit Manipulation",
    "Breadth-First Search",
    "Graph",
    "Bitmask"
  ],
  "description": "You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.\n\nReturn the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\n\n \nExample 1:\n\nInput: graph = [[1,2,3],[0],[0],[0]]\nOutput: 4\nExplanation: One possible path is [1,0,2,0,3]\n\n\nExample 2:\n\nInput: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\nOutput: 4\nExplanation: One possible path is [0,1,4,2,3]\n\n\n \nConstraints:\n\n\n\tn == graph.length\n\t1 <= n <= 12\n\t0 <= graph[i].length < n\n\tgraph[i] does not contain i.\n\tIf graph[a] contains b, then graph[b] contains a.\n\tThe input graph is always connected.\n\n"
}