{
  "id": "maximize-palindrome-length-from-subsequences",
  "name": "Maximize Palindrome Length From Subsequences",
  "tags": [
    "String",
    "Dynamic Programming"
  ],
  "description": "You are given two strings, word1 and word2. You want to construct a string in the following manner:\n\n\n\tChoose some non-empty subsequence subsequence1 from word1.\n\tChoose some non-empty subsequence subsequence2 from word2.\n\tConcatenate the subsequences: subsequence1 + subsequence2, to make the string.\n\n\nReturn the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0.\n\nA subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.\n\nA palindrome is a string that reads the same forward as well as backward.\n\n \nExample 1:\n\nInput: word1 = \"cacb\", word2 = \"cbba\"\nOutput: 5\nExplanation: Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome.\n\nExample 2:\n\nInput: word1 = \"ab\", word2 = \"ab\"\nOutput: 3\nExplanation: Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome.\n\nExample 3:\n\nInput: word1 = \"aa\", word2 = \"bb\"\nOutput: 0\nExplanation: You cannot construct a palindrome from the described method, so return 0.\n\n \nConstraints:\n\n\n\t1 <= word1.length, word2.length <= 1000\n\tword1 and word2 consist of lowercase English letters.\n\n"
}